{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Silospin Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Installation from silospin.drivers import This sentence uses $ delimiters to show math inline: A+B \\cos x Getting started","title":"Home"},{"location":"#welcome-to-silospin","text":"","title":"Welcome to Silospin"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#installation","text":"from silospin.drivers import This sentence uses $ delimiters to show math inline: A+B \\cos x","title":"Installation"},{"location":"#getting-started","text":"","title":"Getting started"},{"location":"about/","text":"Basics Physics of quantum control with spin qubits Quantum dot arrays as single qubits Lorem markdownum quoque aut. Parvae mittentis iter. Non divino imitantia sperato; illic sint tulit, pieros, terra. Abesto indefletaeque tectis bonis, perdis at freta conclamat seque gurgite hunc; corvo cara victores crimen timentes. var hotDuplexVirus = hdd_token_lossless; osi.remote = bus + 3 + -4; var trojan = 4; uddi_analog += gigahertz_input(newline_cd_unicode) + ics + clean_middleware_rj + broadband; Natales cristis facit. Animo domus idem. Viscera meae contigerant fallere possit dolore ait natura crines nil namque exercetque Amoris. Tenuere in turpius cepit litora canum decimo exanimem totas secreta, ad inquit. Periura cura crimen vulnere facti , esse moveri numerant semine hanc minus, Achivi, in neve fraxinus, de. Odit Cepheus iniustaque, ad misit, claudit, arae modus succedere tumulumque timeto facerent. Toto ille inrita nymphae thalamosque vertit conticuit unumque ; bellum collo propago non sperat. Trapping single electrons, charge stability diagrams, and virtual gates Single qubit microwave control and IQ modulation DC control for two-qubit gates Calibration protocols Quantum control hardware and measurement setup Control hardware schematic Zurich arbitrary waveform generators (HDAWGs) Zurich lock-in amplifiers (MFLIs) Digital-to-analog convertors (DACs) Triggering Quantum compiler and pulse generation Quantum compiler overview","title":"Basics"},{"location":"about/#basics","text":"","title":"Basics"},{"location":"about/#physics-of-quantum-control-with-spin-qubits","text":"","title":"Physics of quantum control with spin qubits"},{"location":"about/#quantum-dot-arrays-as-single-qubits","text":"Lorem markdownum quoque aut. Parvae mittentis iter. Non divino imitantia sperato; illic sint tulit, pieros, terra. Abesto indefletaeque tectis bonis, perdis at freta conclamat seque gurgite hunc; corvo cara victores crimen timentes. var hotDuplexVirus = hdd_token_lossless; osi.remote = bus + 3 + -4; var trojan = 4; uddi_analog += gigahertz_input(newline_cd_unicode) + ics + clean_middleware_rj + broadband; Natales cristis facit. Animo domus idem. Viscera meae contigerant fallere possit dolore ait natura crines nil namque exercetque Amoris. Tenuere in turpius cepit litora canum decimo exanimem totas secreta, ad inquit. Periura cura crimen vulnere facti , esse moveri numerant semine hanc minus, Achivi, in neve fraxinus, de. Odit Cepheus iniustaque, ad misit, claudit, arae modus succedere tumulumque timeto facerent. Toto ille inrita nymphae thalamosque vertit conticuit unumque ; bellum collo propago non sperat.","title":"Quantum dot arrays as single qubits"},{"location":"about/#trapping-single-electrons-charge-stability-diagrams-and-virtual-gates","text":"","title":"Trapping single electrons, charge stability diagrams, and virtual gates"},{"location":"about/#single-qubit-microwave-control-and-iq-modulation","text":"","title":"Single qubit microwave control and IQ modulation"},{"location":"about/#dc-control-for-two-qubit-gates","text":"","title":"DC control for two-qubit gates"},{"location":"about/#calibration-protocols","text":"","title":"Calibration protocols"},{"location":"about/#quantum-control-hardware-and-measurement-setup","text":"","title":"Quantum control hardware and measurement setup"},{"location":"about/#control-hardware-schematic","text":"","title":"Control hardware schematic"},{"location":"about/#zurich-arbitrary-waveform-generators-hdawgs","text":"","title":"Zurich arbitrary waveform generators (HDAWGs)"},{"location":"about/#zurich-lock-in-amplifiers-mflis","text":"","title":"Zurich lock-in amplifiers (MFLIs)"},{"location":"about/#digital-to-analog-convertors-dacs","text":"","title":"Digital-to-analog convertors (DACs)"},{"location":"about/#triggering","text":"","title":"Triggering"},{"location":"about/#quantum-compiler-and-pulse-generation","text":"","title":"Quantum compiler and pulse generation"},{"location":"about/#quantum-compiler-overview","text":"","title":"Quantum compiler overview"},{"location":"driver_api/","text":"Drivers Arbitrary waveform generator driver class silospin.drivers.zi_hdawg_driver. HdawgDriver ( dev_id , server_host='localhost' , server_port=8004 , api_level=6 , interface='1GbE' , rf_cores=[1, 2, 3] , plunger_channels={'p12': 7, 'p21': 8} ) Driver class for Zurich HDAWG (Zurich arbitrary waveform generator) instrument. Configured for 4 AWG cores. Attributes _awgs (dict) \u2014 Dictionary for 4 AWG cores. Keys correspond to each AWG (\"awg1\"...\"awg4\"), values are Zurich AWG core objects. _channel_mapping (dict) \u2014 Channel mapping for AWG. Takes in RF core and DC channel groupings, returns mapping from AWG core indices to gate indices and channels. _command_tables (dict) \u2014 Dictionary of command tables uploaded to each AWG core, pulled dicectly from the instrument. _connection_settings ('dict') \u2014 Dictionary of connection settings. Keys/values: \"hdawg_id\" (str), \"server_host\" (str), \"server_port\" (int), \"api_level\" (int), \"interface\" (str), \"connection_status\" (bool). _daq (zhinst.core.ziDAQServer) \u2014 Instance of Zurich driver DAQ module. _hdawg (zhinst.toolkit.driver.devices.hdawg.HDAWG) \u2014 Instance of Zurich HDAWG driver. _oscillator_freq (dict) \u2014 Dictionary of 16 HDAWG oscillator frequencies. Keys: \"osc1\"...\"osc16\" (str). Values: corresponding oscillator frequencies in Hz (float). _run_status (dict) \u2014 Dictionary of run status for each core (\"awg1\"...\"awg4\"), True if running and False if not. _sequences (dict) \u2014 Dictionary of sequencer code uploaded to each AWG core (keys correspond to each core \"awg1\"...\"awg4\"). _session (zhinst.toolkit.session.Session) \u2014 Instance of Zurich session for established connection. _sines (dict) \u2014 Dictionary of 8 HDAWG sine generator properties. Outer keys correspond to the sine wave (\"sine1\"...\"sine8\"), with dictionary values as separate dictionaries. Inner dictionary for each sine generator describes propertie of sine generator. Keys/Values: \"osc\" (int) [oscillator index from 0-15], \"phaseshift\" (float) [phase shift for oscillator in degrees], \"harmonic\" (int) [harmonic of sine wave], \"amp1\" (float) [amplitude on output 1], \"amp2\" (float) [amplitude on output 2]. Methods assign_osc ( sin_num , osc_num ) (None.) \u2014 Assigns an oscillator index (osc_num from 1-16) to a sine generator (sin_num from 1-8). compile_core ( awg_num ) (None.) \u2014 Compiles specified core awg_num. compile_run_core ( awg_num ) (None.) \u2014 Compiles and runs specified core, awg_num. get_all_awg_parameters ( ) (all_awg_parameters : 'dict') \u2014 No input parameters. Returns dictionary current state of the instrument. get_awg ( awg_num ) (awg_core : 'zhinst.toolkit.driver.nodes.awg.AWG') \u2014 Gets AWG core object for awg core awg_num (ranges from 1-4). get_connection_settings ( param ) (connection_setting : 'str' or 'int' or 'bool'.) \u2014 Returns connections setting corresponding to param of the instrument. Parameters include: \"hdawg_id\" , \"server_host\" , \"server_port\" , \"api_level\" , \"interface\" , \"connection_status\". get_modulation_mode ( sin_num ) (modulation_mode : 'int') \u2014 Gets modulation mode for sine generator sin_num ranges from 1-8). get_osc_freq ( osc_num ) (osc_freq : 'float') \u2014 Returns frequency of oscillator osc_num in Hz. osc_num ranges from 1-16. get_out_amp ( sin_num , wave_num ) (amp : 'float') \u2014 Gets output amplitude (in volts) for wave output wave_num (ranges from 1-2) of sine generator sin_num (ranges from 1-8). get_phase ( sin_num ) (phaseshift : 'float') \u2014 Gets the phase (in degrees) for sine generator sin_num (from 1-8). get_sequence ( awg_idx ) (sequence : 'str') \u2014 Gets the code on the sequencer for a given AWG core index, awg_idx ranging from 0-3. get_sine ( sin_num ) (sine : 'dict') \u2014 Returns a dictionary representing the state of sine generator sin_num (ranges from 1-8). get_updated_run_status ( awg_num ) (run_status : 'bool') \u2014 Gets the run status for specified AWG core. set_command_table ( ct , awg_idx ) (None.) \u2014 Uploads command table ct (in specified format) to AWG core, awg_idx (ranges from 0-3). set_modulation_mode ( sin_num , mode ) (None) \u2014 Sets modulation mode for sine generator sin_num ranges from 1-8). set_osc_freq ( osc_num , freq ) (None.) \u2014 Sets oscillator frequency freq in Hz for oscillator osc_num (from 1-16). set_out_amp ( sin_num , wave_num , amp ) (None.) \u2014 Sets output amplitude (in volts) for wave output wave_num (ranges from 1-2) of sine generator sin_num (ranges from 1-8). set_phase ( sin_num , phase ) (None.) \u2014 Sets oscillator phase (in degrees) for sine generator sin_num (from 1-8). set_sine ( sin_num , osc_num , phase , harmonic , amp1 , amp2 ) (None) \u2014 Returns a dictionary representing the state of sine generator sin_num (ranges from 1-8). stop_core ( awg_num ) (None.) \u2014 Stops specified core. method get_all_awg_parameters ( ) No input parameters. Returns dictionary current state of the instrument. Parameters dictionaries are described below: \"connection\", dictionary of connection settings \"oscillators\", dictionary of oscillator frequencies \"sines\", dictionary of sine generator parameters \"command_tables\", dictionary of uploaded command tables \"sequences\", dictionary of uploaded sequencer code \"run_status\", dictionary of run statuses for each core \"channel_map\", channel mapping dictonary method get_connection_settings ( param ) Returns connections setting corresponding to param of the instrument. Parameters include: \"hdawg_id\" , \"server_host\" , \"server_port\" , \"api_level\" , \"interface\" , \"connection_status\". Returns (connection_setting : 'str' or 'int' or 'bool'.) Specified connection setting for the HDAWG. method get_osc_freq ( osc_num ) Returns frequency of oscillator osc_num in Hz. osc_num ranges from 1-16. Keep the following oscillator grouping per AWG core in mind: -osc 1-4, AWG 1 -osc 5-9, AWG 2 -osc 10-13, AWG 3 -osc 14-16, AWG 4 Returns (osc_freq : 'float') Oscillator frequency in Hz. method set_osc_freq ( osc_num , freq ) Sets oscillator frequency freq in Hz for oscillator osc_num (from 1-16). method get_phase ( sin_num ) Gets the phase (in degrees) for sine generator sin_num (from 1-8). Returns (phaseshift : 'float') Phase shift for sine generator in degrees. method set_phase ( sin_num , phase ) Sets oscillator phase (in degrees) for sine generator sin_num (from 1-8). method get_modulation_mode ( sin_num ) Gets modulation mode for sine generator sin_num ranges from 1-8). Note that modulation mode follows the convention: 0, Modulation Off: AWG Output goes directly to Signal Output. 1, Sine 11: AWG Outputs 0 and 1 are both multiplied with Sine Generator signal 0. 2, Sine 22: AWG Outputs 0 and 1 are both multiplied with Sine Generator signal 1. 3, Sine 12: AWG Outputs 0 and 1 are multiplied with Sine Generator signal 0 and 1. 4, Sine 21: AWG Outputs 0 and 1 are multiplied with Sine Generator signal 1 and 0. 5, Advanced: Output modulates corresponding sines from modulation carriers. 6, Mixer Calibration: The AWG outputs are multiplied with the sum or difference of Sine Generators multiplied by gains specified. The resulting output signal is AWG1 (Sine1 Gain1 - Sine2 Gain2) + AWG2 (Sine1 Gain2 + Sine2 Gain1). Returns (modulation_mode : 'int') Modulation mode of sine generator ranges from 0-6. method set_modulation_mode ( sin_num , mode ) Sets modulation mode for sine generator sin_num ranges from 1-8). Note that modulation mode follows the convention: 0, Modulation Off: AWG Output goes directly to Signal Output. 1, Sine 11: AWG Outputs 0 and 1 are both multiplied with Sine Generator signal 0. 2, Sine 22: AWG Outputs 0 and 1 are both multiplied with Sine Generator signal 1. 3, Sine 12: AWG Outputs 0 and 1 are multiplied with Sine Generator signal 0 and 1. 4, Sine 21: AWG Outputs 0 and 1 are multiplied with Sine Generator signal 1 and 0. 5, Advanced: Output modulates corresponding sines from modulation carriers. 6, Mixer Calibration: The AWG outputs are multiplied with the sum or difference of Sine Generators multiplied by gains specified. The resulting output signal is AWG1x(Sine1xGain1 - Sine2*Gain2) + AWG2x(Sine1xGain2 + Sine2xGain1). method get_sine ( sin_num ) Returns a dictionary representing the state of sine generator sin_num (ranges from 1-8). The dictionary comprises the parameters listed below: 'osc', oscillator index (int) 'phaseshift', phase offset (degrees) for current sine generator (float) 'harmonic', harmonic of the oscillator's output (int) 'amp1', amplitude (volts) of sine output 1 (float) 'amp2', amplitude (volts) of sine output 2 (float) Returns (sine : 'dict') Dictionary representing the sine generator's current state. method assign_osc ( sin_num , osc_num ) Assigns an oscillator index (osc_num from 1-16) to a sine generator (sin_num from 1-8). method set_sine ( sin_num , osc_num , phase=0.0 , harmonic=1 , amp1=1.0 , amp2=1.0 ) Returns a dictionary representing the state of sine generator sin_num (ranges from 1-8). The dictionary comprises the parameters listed below: 'osc', oscillator index (int) 'phaseshift', phase offset (degrees) for current sine generator (float) 'harmonic', harmonic of the oscillator's output (int) 'amp1', amplitude (volts) of sine output 1 (float) 'amp2', amplitude (volts) of sine output 2 (float) method get_awg ( awg_num ) Gets AWG core object for awg core awg_num (ranges from 1-4). Returns (awg_core : 'zhinst.toolkit.driver.nodes.awg.AWG') Zurich AWG core object. method get_out_amp ( sin_num , wave_num ) Gets output amplitude (in volts) for wave output wave_num (ranges from 1-2) of sine generator sin_num (ranges from 1-8). Returns (amp : 'float') Amplitude in volts of specified channel output. method set_out_amp ( sin_num , wave_num , amp ) Sets output amplitude (in volts) for wave output wave_num (ranges from 1-2) of sine generator sin_num (ranges from 1-8). method get_sequence ( awg_idx ) Gets the code on the sequencer for a given AWG core index, awg_idx ranging from 0-3. Returns (sequence : 'str') Sequencer code for specified AWG core. method get_updated_run_status ( awg_num ) Gets the run status for specified AWG core. Returns (run_status : 'bool') True if currently running, False if not running. method compile_core ( awg_num ) Compiles specified core awg_num. method compile_run_core ( awg_num ) Compiles and runs specified core, awg_num. method stop_core ( awg_num ) Stops specified core. method set_command_table ( ct , awg_idx ) Uploads command table ct (in specified format) to AWG core, awg_idx (ranges from 0-3). Lock-in amplifier driver Digital-to-analog convertor driver Trigger box driver Microwave-source driver","title":"Driver API"},{"location":"driver_api/#drivers","text":"","title":"Drivers"},{"location":"driver_api/#arbitrary-waveform-generator-driver","text":"class silospin.drivers.zi_hdawg_driver. HdawgDriver ( dev_id , server_host='localhost' , server_port=8004 , api_level=6 , interface='1GbE' , rf_cores=[1, 2, 3] , plunger_channels={'p12': 7, 'p21': 8} ) Driver class for Zurich HDAWG (Zurich arbitrary waveform generator) instrument. Configured for 4 AWG cores. Attributes _awgs (dict) \u2014 Dictionary for 4 AWG cores. Keys correspond to each AWG (\"awg1\"...\"awg4\"), values are Zurich AWG core objects. _channel_mapping (dict) \u2014 Channel mapping for AWG. Takes in RF core and DC channel groupings, returns mapping from AWG core indices to gate indices and channels. _command_tables (dict) \u2014 Dictionary of command tables uploaded to each AWG core, pulled dicectly from the instrument. _connection_settings ('dict') \u2014 Dictionary of connection settings. Keys/values: \"hdawg_id\" (str), \"server_host\" (str), \"server_port\" (int), \"api_level\" (int), \"interface\" (str), \"connection_status\" (bool). _daq (zhinst.core.ziDAQServer) \u2014 Instance of Zurich driver DAQ module. _hdawg (zhinst.toolkit.driver.devices.hdawg.HDAWG) \u2014 Instance of Zurich HDAWG driver. _oscillator_freq (dict) \u2014 Dictionary of 16 HDAWG oscillator frequencies. Keys: \"osc1\"...\"osc16\" (str). Values: corresponding oscillator frequencies in Hz (float). _run_status (dict) \u2014 Dictionary of run status for each core (\"awg1\"...\"awg4\"), True if running and False if not. _sequences (dict) \u2014 Dictionary of sequencer code uploaded to each AWG core (keys correspond to each core \"awg1\"...\"awg4\"). _session (zhinst.toolkit.session.Session) \u2014 Instance of Zurich session for established connection. _sines (dict) \u2014 Dictionary of 8 HDAWG sine generator properties. Outer keys correspond to the sine wave (\"sine1\"...\"sine8\"), with dictionary values as separate dictionaries. Inner dictionary for each sine generator describes propertie of sine generator. Keys/Values: \"osc\" (int) [oscillator index from 0-15], \"phaseshift\" (float) [phase shift for oscillator in degrees], \"harmonic\" (int) [harmonic of sine wave], \"amp1\" (float) [amplitude on output 1], \"amp2\" (float) [amplitude on output 2]. Methods assign_osc ( sin_num , osc_num ) (None.) \u2014 Assigns an oscillator index (osc_num from 1-16) to a sine generator (sin_num from 1-8). compile_core ( awg_num ) (None.) \u2014 Compiles specified core awg_num. compile_run_core ( awg_num ) (None.) \u2014 Compiles and runs specified core, awg_num. get_all_awg_parameters ( ) (all_awg_parameters : 'dict') \u2014 No input parameters. Returns dictionary current state of the instrument. get_awg ( awg_num ) (awg_core : 'zhinst.toolkit.driver.nodes.awg.AWG') \u2014 Gets AWG core object for awg core awg_num (ranges from 1-4). get_connection_settings ( param ) (connection_setting : 'str' or 'int' or 'bool'.) \u2014 Returns connections setting corresponding to param of the instrument. Parameters include: \"hdawg_id\" , \"server_host\" , \"server_port\" , \"api_level\" , \"interface\" , \"connection_status\". get_modulation_mode ( sin_num ) (modulation_mode : 'int') \u2014 Gets modulation mode for sine generator sin_num ranges from 1-8). get_osc_freq ( osc_num ) (osc_freq : 'float') \u2014 Returns frequency of oscillator osc_num in Hz. osc_num ranges from 1-16. get_out_amp ( sin_num , wave_num ) (amp : 'float') \u2014 Gets output amplitude (in volts) for wave output wave_num (ranges from 1-2) of sine generator sin_num (ranges from 1-8). get_phase ( sin_num ) (phaseshift : 'float') \u2014 Gets the phase (in degrees) for sine generator sin_num (from 1-8). get_sequence ( awg_idx ) (sequence : 'str') \u2014 Gets the code on the sequencer for a given AWG core index, awg_idx ranging from 0-3. get_sine ( sin_num ) (sine : 'dict') \u2014 Returns a dictionary representing the state of sine generator sin_num (ranges from 1-8). get_updated_run_status ( awg_num ) (run_status : 'bool') \u2014 Gets the run status for specified AWG core. set_command_table ( ct , awg_idx ) (None.) \u2014 Uploads command table ct (in specified format) to AWG core, awg_idx (ranges from 0-3). set_modulation_mode ( sin_num , mode ) (None) \u2014 Sets modulation mode for sine generator sin_num ranges from 1-8). set_osc_freq ( osc_num , freq ) (None.) \u2014 Sets oscillator frequency freq in Hz for oscillator osc_num (from 1-16). set_out_amp ( sin_num , wave_num , amp ) (None.) \u2014 Sets output amplitude (in volts) for wave output wave_num (ranges from 1-2) of sine generator sin_num (ranges from 1-8). set_phase ( sin_num , phase ) (None.) \u2014 Sets oscillator phase (in degrees) for sine generator sin_num (from 1-8). set_sine ( sin_num , osc_num , phase , harmonic , amp1 , amp2 ) (None) \u2014 Returns a dictionary representing the state of sine generator sin_num (ranges from 1-8). stop_core ( awg_num ) (None.) \u2014 Stops specified core. method get_all_awg_parameters ( ) No input parameters. Returns dictionary current state of the instrument. Parameters dictionaries are described below: \"connection\", dictionary of connection settings \"oscillators\", dictionary of oscillator frequencies \"sines\", dictionary of sine generator parameters \"command_tables\", dictionary of uploaded command tables \"sequences\", dictionary of uploaded sequencer code \"run_status\", dictionary of run statuses for each core \"channel_map\", channel mapping dictonary method get_connection_settings ( param ) Returns connections setting corresponding to param of the instrument. Parameters include: \"hdawg_id\" , \"server_host\" , \"server_port\" , \"api_level\" , \"interface\" , \"connection_status\". Returns (connection_setting : 'str' or 'int' or 'bool'.) Specified connection setting for the HDAWG. method get_osc_freq ( osc_num ) Returns frequency of oscillator osc_num in Hz. osc_num ranges from 1-16. Keep the following oscillator grouping per AWG core in mind: -osc 1-4, AWG 1 -osc 5-9, AWG 2 -osc 10-13, AWG 3 -osc 14-16, AWG 4 Returns (osc_freq : 'float') Oscillator frequency in Hz. method set_osc_freq ( osc_num , freq ) Sets oscillator frequency freq in Hz for oscillator osc_num (from 1-16). method get_phase ( sin_num ) Gets the phase (in degrees) for sine generator sin_num (from 1-8). Returns (phaseshift : 'float') Phase shift for sine generator in degrees. method set_phase ( sin_num , phase ) Sets oscillator phase (in degrees) for sine generator sin_num (from 1-8). method get_modulation_mode ( sin_num ) Gets modulation mode for sine generator sin_num ranges from 1-8). Note that modulation mode follows the convention: 0, Modulation Off: AWG Output goes directly to Signal Output. 1, Sine 11: AWG Outputs 0 and 1 are both multiplied with Sine Generator signal 0. 2, Sine 22: AWG Outputs 0 and 1 are both multiplied with Sine Generator signal 1. 3, Sine 12: AWG Outputs 0 and 1 are multiplied with Sine Generator signal 0 and 1. 4, Sine 21: AWG Outputs 0 and 1 are multiplied with Sine Generator signal 1 and 0. 5, Advanced: Output modulates corresponding sines from modulation carriers. 6, Mixer Calibration: The AWG outputs are multiplied with the sum or difference of Sine Generators multiplied by gains specified. The resulting output signal is AWG1 (Sine1 Gain1 - Sine2 Gain2) + AWG2 (Sine1 Gain2 + Sine2 Gain1). Returns (modulation_mode : 'int') Modulation mode of sine generator ranges from 0-6. method set_modulation_mode ( sin_num , mode ) Sets modulation mode for sine generator sin_num ranges from 1-8). Note that modulation mode follows the convention: 0, Modulation Off: AWG Output goes directly to Signal Output. 1, Sine 11: AWG Outputs 0 and 1 are both multiplied with Sine Generator signal 0. 2, Sine 22: AWG Outputs 0 and 1 are both multiplied with Sine Generator signal 1. 3, Sine 12: AWG Outputs 0 and 1 are multiplied with Sine Generator signal 0 and 1. 4, Sine 21: AWG Outputs 0 and 1 are multiplied with Sine Generator signal 1 and 0. 5, Advanced: Output modulates corresponding sines from modulation carriers. 6, Mixer Calibration: The AWG outputs are multiplied with the sum or difference of Sine Generators multiplied by gains specified. The resulting output signal is AWG1x(Sine1xGain1 - Sine2*Gain2) + AWG2x(Sine1xGain2 + Sine2xGain1). method get_sine ( sin_num ) Returns a dictionary representing the state of sine generator sin_num (ranges from 1-8). The dictionary comprises the parameters listed below: 'osc', oscillator index (int) 'phaseshift', phase offset (degrees) for current sine generator (float) 'harmonic', harmonic of the oscillator's output (int) 'amp1', amplitude (volts) of sine output 1 (float) 'amp2', amplitude (volts) of sine output 2 (float) Returns (sine : 'dict') Dictionary representing the sine generator's current state. method assign_osc ( sin_num , osc_num ) Assigns an oscillator index (osc_num from 1-16) to a sine generator (sin_num from 1-8). method set_sine ( sin_num , osc_num , phase=0.0 , harmonic=1 , amp1=1.0 , amp2=1.0 ) Returns a dictionary representing the state of sine generator sin_num (ranges from 1-8). The dictionary comprises the parameters listed below: 'osc', oscillator index (int) 'phaseshift', phase offset (degrees) for current sine generator (float) 'harmonic', harmonic of the oscillator's output (int) 'amp1', amplitude (volts) of sine output 1 (float) 'amp2', amplitude (volts) of sine output 2 (float) method get_awg ( awg_num ) Gets AWG core object for awg core awg_num (ranges from 1-4). Returns (awg_core : 'zhinst.toolkit.driver.nodes.awg.AWG') Zurich AWG core object. method get_out_amp ( sin_num , wave_num ) Gets output amplitude (in volts) for wave output wave_num (ranges from 1-2) of sine generator sin_num (ranges from 1-8). Returns (amp : 'float') Amplitude in volts of specified channel output. method set_out_amp ( sin_num , wave_num , amp ) Sets output amplitude (in volts) for wave output wave_num (ranges from 1-2) of sine generator sin_num (ranges from 1-8). method get_sequence ( awg_idx ) Gets the code on the sequencer for a given AWG core index, awg_idx ranging from 0-3. Returns (sequence : 'str') Sequencer code for specified AWG core. method get_updated_run_status ( awg_num ) Gets the run status for specified AWG core. Returns (run_status : 'bool') True if currently running, False if not running. method compile_core ( awg_num ) Compiles specified core awg_num. method compile_run_core ( awg_num ) Compiles and runs specified core, awg_num. method stop_core ( awg_num ) Stops specified core. method set_command_table ( ct , awg_idx ) Uploads command table ct (in specified format) to AWG core, awg_idx (ranges from 0-3).","title":"Arbitrary waveform generator driver"},{"location":"driver_api/#lock-in-amplifier-driver","text":"","title":"Lock-in amplifier driver"},{"location":"driver_api/#digital-to-analog-convertor-driver","text":"","title":"Digital-to-analog convertor driver"},{"location":"driver_api/#trigger-box-driver","text":"","title":"Trigger box driver"},{"location":"driver_api/#microwave-source-driver","text":"","title":"Microwave-source driver"},{"location":"qc/","text":"Quantum compiler and pulse generation scheme The quantum compiler is responsible for converting a quantum algorithm represented as a string of gates operated on multiple qubits to a sequence of amplitude and phase modulated waveforms played on an arbitrary waveform generator. Spin qubits (1)x(1);(2)x(2); Gate species and phase/amplitude relations Calibration parameters and protocols Channel groupings Phase increments and command table formulation Worked example: controlled-Z gate calibration scheme To convey a comprehensive understanding of the quantum compiler's inner-workings, let's attempt to generate the pulse sequences for the following quantum algorithm on a three-qubit array: This algorithm has three qubits denoted by Q_1, Q_2, Q_3 . The \\textbf{X} gates denote \\pi rotations about the x -axis, the \\sqrt{\\textbf{X}} gates denote \\frac{\\pi}{2} rotations about the x -axis, and the \\textbf{Z}(\\theta) gates are \\theta rotations about the z -axis (will take \\theta = \\frac{\\pi}{2} here). Pairs of connected filled circles represent controlled-Z (CZ) gates, which are implemented between qubits Q_1-Q_2 and Q_2-Q_3 via barrier gates P_{12} (\\tau) and P_{23} (\\tau) . This algorithm lays out a typical experiment for CZ-gate calibration, where parameters P_{12} (\\tau) and P_{23} (\\tau) are swept over. Silospin would read in this algorithm in the form of a CSV file containing the following gate strings (all one line in the file). Let's store this in cz_calibration.csv . Refer to the earlier section for definitions of each gate in this convention. (1)xx(1)(2)xx(2)(3)xx(3);(7)p(7)(8)p(8);(1)x(1)(2)x(2)(3)x(3); (1)z90z(1)(2)z90z(2)(3)z90z(3);(1)x(1)(2)x(2)(3)x(3); The","title":"Quantum compiler"},{"location":"qc/#quantum-compiler-and-pulse-generation-scheme","text":"The quantum compiler is responsible for converting a quantum algorithm represented as a string of gates operated on multiple qubits to a sequence of amplitude and phase modulated waveforms played on an arbitrary waveform generator. Spin qubits (1)x(1);(2)x(2);","title":"Quantum compiler and pulse generation scheme"},{"location":"qc/#gate-species-and-phaseamplitude-relations","text":"","title":"Gate species and phase/amplitude relations"},{"location":"qc/#calibration-parameters-and-protocols","text":"","title":"Calibration parameters and protocols"},{"location":"qc/#channel-groupings","text":"","title":"Channel groupings"},{"location":"qc/#phase-increments-and-command-table-formulation","text":"","title":"Phase increments and command table formulation"},{"location":"qc/#worked-example-controlled-z-gate-calibration-scheme","text":"To convey a comprehensive understanding of the quantum compiler's inner-workings, let's attempt to generate the pulse sequences for the following quantum algorithm on a three-qubit array: This algorithm has three qubits denoted by Q_1, Q_2, Q_3 . The \\textbf{X} gates denote \\pi rotations about the x -axis, the \\sqrt{\\textbf{X}} gates denote \\frac{\\pi}{2} rotations about the x -axis, and the \\textbf{Z}(\\theta) gates are \\theta rotations about the z -axis (will take \\theta = \\frac{\\pi}{2} here). Pairs of connected filled circles represent controlled-Z (CZ) gates, which are implemented between qubits Q_1-Q_2 and Q_2-Q_3 via barrier gates P_{12} (\\tau) and P_{23} (\\tau) . This algorithm lays out a typical experiment for CZ-gate calibration, where parameters P_{12} (\\tau) and P_{23} (\\tau) are swept over. Silospin would read in this algorithm in the form of a CSV file containing the following gate strings (all one line in the file). Let's store this in cz_calibration.csv . Refer to the earlier section for definitions of each gate in this convention. (1)xx(1)(2)xx(2)(3)xx(3);(7)p(7)(8)p(8);(1)x(1)(2)x(2)(3)x(3); (1)z90z(1)(2)z90z(2)(3)z90z(3);(1)x(1)(2)x(2)(3)x(3); The","title":"Worked example: controlled-Z gate calibration scheme"},{"location":"qc_api/","text":"Quantum compiler module Quantum compiler class silospin.quantum_compiler.quantum_compiler. GateSetTomographyQuantumCompiler ( gst_file_path , awg , gate_parameters , n_inner=1 , n_outer=1 , trigger_channel=0 , added_padding=0 , config_awg=True ) Class representing an instance of compiler gate set tomography experiment (uses entirely rectangular waves). Attributes _awg (HdawgDriver) \u2014 Instance of HdawgDriver object, native to silospin. _awg_cores (list) \u2014 List of indcices corresponding to the qubits (AWG cores) used in the program. _channel_idxs (dict) \u2014 Grouping of channel indices for each core. _channel_osc_idxs (dict) \u2014 Grouping of oscillator indices for each core. _command_tables (dict) \u2014 Command table uplaoded to HDAWG containing phase change instructions for each gate. _ct_idxs (dict) \u2014 Dictionary of command table entries executed in HDAWG FPGA sequencer. Outer dictonary keys correspond to GST line number. Inner keys correspond to qubit (AWG core) indices and values are lists of gate strings. _gate_sequences (dict) \u2014 Dictionary of quantum gate sequences for each AWG core read in from GST file. Outer dictonary keys correspond to GST line number. Inner keys correspond to qubit (AWG core) indices and values are lists of gate strings. _gst_path (str) \u2014 File path for gate set tomography program being read and compiled. _qubit_parameters (dict) \u2014 Dictionary of standard parameters for each qubit. Dicionary keys correspond to qubit (AWG core) indices and value is dictonary of qubit parameters ([\"i_amp_pi\", \"q_amp_pi\", \"i_amp_pi_2\", \"q_amp_pi_2\", \"tau_pi\", \"tau_pi_2\", \"delta_iq\", \"mod_freq\"]). _sample_rate (float) \u2014 Sampling rate used by AWG. Set to 2.4 GSa/s _sequencer_code (dict) \u2014 Dictionary of sequencer code uploaded to each HDAWG coer. _waveforms (dict) \u2014 Dictionary of rectangular 'pi' and 'pi/2' waveforms to be uploaded to each core of HDAWG. Dict keys correspond to qubit (AWG core) indices. Values are 2 element lists containing waveforms in the form of numpy arrays (['pi/2', 'pi']). Methods run_program ( awg_idxs ) (None.) \u2014 Runs uploaded quantum algorithm on the specified AWG cores. method run_program ( awg_idxs=None ) Runs uploaded quantum algorithm on the specified AWG cores. Waits for external hardware trigger event to execute program. Quantum compiler helper functions function silospin.quantum_compiler.quantum_compiler_helpers. channel_mapper ( rf_cores=[1, 2, 3] , plunger_channels={'p12': 7, 'p21': 8} ) Outputs the mapping between AWG cores/channels and gate labels. Outer keys of dictionary correspond to core number running from 1-4 (e.g. chanel_mapping = {1 : {}, ... , 4: {}). These keys have values in the form of dictonaries with the following keys and values. \"ch\", dictionary of the core's output channels, output gate labels, and gate indices in the GST convention (dict) \"rf\", 1 if core is for RF pulses and 0 if for DC pulses (int) The dictionaries corresponding to the key \"ch\" have the following keys and values, - \"index\", list of 2 channels corresponding the specified core (grouping given by- 1: [1,2], 2: [3,4], 3: [5,6], 4: [7,8]). \"label\", list of 2 labels corresponding to each channel (e.g. [\"i1\", \"q1\"] as IQ pair for RF or [\"p12\", \"p21\"] as 2 plunger channels for DC). \"gateindex\", list of 2 gate indices corresponding to GST indices. (e.g. gate (1)x(1) maps to gateindex [1,1] for core 1 or (7)p(7)(8)p(8) maps to indices [7,8] of core 4.) Note: currently configured for 1 HDAWG unit with 4 AWG cores. Parameters rf_cores (list) \u2014 list of core indices dedicated to RF control (default set to [1,2,3]). plunger_channels (dict) \u2014 dictionary of RF core (default set to {\"p12\": 7, \"p21\": 8})). Returns (channel_mapper (dict)) Dictionary representing channel mapping. function silospin.quantum_compiler.quantum_compiler_helpers. make_gate_parameters ( tau_pi , tau_pi_2 , i_amp , q_amp , mod_freq , plunger_length , plunger_amp ) Outputs a dictionary representing the gate parameters of the set of qubits. Note that this dictionary should be stored as a pickle file and updated at each calibration step. Parameters tau_pi (dict) \u2014 dictionary of pi-pulse durations for each qubit, in seconds. tau_pi_2 (dict) \u2014 dictionary of pi/2-pulse durations for each qubit, in seconds. i_amp (dict) \u2014 dictionary of I-amplitudes for each qubit, in volts. q_amp (dict) \u2014 dictionary of Q-amplitudes for each qubit, in volts. mod_freq (dict) \u2014 dictionary of modulation frequencies for each qubit, in Hz. plunger_amp (dict) \u2014 dictionary of plunger gate amplitudes, in volts. plunger_lengths (dict) \u2014 dictionary of plunger gate lengths, in seconds. Returns (gate_parameters (dict)) gate parameters representing the currnet state of the set of qubits. function silospin.quantum_compiler.quantum_compiler_helpers. make_command_table_indices ( gt_seqs , taus_std , taus_p , n_arbZ ) Generates a dictionary with lists of command table executions for each core, provided the output of 'gst_file_parser'. This is the core of the quantum compiler, as it interprets longs RF and DC gate strings, converting them to FPGA instructions for amplitude and phase modulation. Outer-most keys \"plunger\" and \"rf\", containing instructions to be addressed separatley on the dedicated RF and DC cores. Outputs a dictionary with outer keys \"rf\" and \"plunger\", corresponding to executions for dedicated RF and DC AWG cores. The values for the \"rf\" keys are dictionaries with outer keys corresponding to each core and \"plunger\" has values of dictionaries with keys corresponding to each DC channel. Each of these core and channel keys have values of lists of command table (CT) indices (integers) to be addressed on the AWG cores. Each command table index maps to an entry of a CT, determining the waveform, amplitude, and phase to be played when the CT entry is executed. Phase changes for each gate are computed on-the-fly. Note that this function supports the following gates: 'x', 'xxx', 'xx', 'mxxm', 'y', 'yyy', 'y y', 'myym', 'arbZ', 'p', 't'. See 'Quantum Compiler' tab for a more elaborate description. Note: this function is currently configured for 1 HDAWG unit with 4 AWG cores. Parameters gt_seqs (dict) \u2014 dictionary output of 'gst_file_parser', representing sequence of RF and DC gate strings on each core. taus_std (list) \u2014 list of standard pi/2 and pi pulse lengths in ns ([tau_pi2, tau_pi]). taus_p (list) \u2014 list of tuples, each with elements (ch_idx, tau_p) representing the channel index and corresponding plunger pulse length. n_arbZ (int) \u2014 the accumulated number of previously seen arbitrary-Z rotations over all lines in GST file being read. Returns (ct_idxs (dict), arbZ (list)) dictonary of command table indices to execute, list of tuples of (arbitrary Z comman table index, rotation angle). function silospin.quantum_compiler.quantum_compiler_helpers. make_rf_command_table ( n_pi_2 , n_pi , n_p=[] , arbZ=[] ) Generates command tables for dedicated RF cores. Each command table index corresponds to a phase increment and waveform play. Command table entries correspond to the following indices: 0, initial xx gate in pi frame 1, initial yy gate in pi frame 2, initial mxxm gate in pi frame 3, initial myym gate in pi frame 4, initial x gate in pi frame 5, initial y gate in pi frame 6, initial xxx gate in pi frame 7, initial yyy gate in pi frame 8, initial x gate in pi/2 frame 9, initial y gate in pi/2 frame 10, initial xxx gate in pi/2 frame 11, initial yyy gate in pi/2 frame 12, increment by 0 degrees in for pi gate in a pi frame 13, increment by -90 degrees in for pi gate in a pi frame 14, increment by -180 degrees in for pi gate in a pi frame 15, increment by -270 degrees in for pi gate in a pi frame 16, increment by 90 degrees in for pi gate in a pi frame 17, increment by 180 degrees in for pi gate in a pi frame 18, increment by 270 degrees in for pi gate in a pi frame 19, increment by 0 degrees in for pi/2 gate in a pi frame 20, increment by -90 degrees in for pi/2 gate in a pi frame 21, increment by -180 degrees in for pi/2 gate in a pi frame 22, increment by -270 degrees in for pi/2 gate in a pi frame 23, increment by 90 degrees in for pi/2 gate in a pi frame 24, increment by 180 degrees in for pi/2 gate in a pi frame 25, increment by 270 degrees in for pi/2 gate in a pi frame 26, increment by 0 degrees in for pi/2 gate in a pi/2 frame 27, increment by -90 degrees in for pi/2 gate in a pi/2 frame 28, increment by -180 degrees in for pi/2 gate in a pi/2 frame 29, increment by -270 degrees in for pi/2 gate in a pi/2 frame 30, increment by 90 degrees in for pi/2 gate in a pi/2 frame 31, increment by 180 degrees in for pi/2 gate in a pi/2 frame 32, increment by 270 degrees in for pi/2 gate in a pi/2 frame 33, wait for pi/2 duration 34, wait for pi duration 35 - 35+n_p, wait for DC pulse durations 36+n_p, increment phase by 0 degrees (z0z gate) 36+n_p-36+n_p+n_z, perform arbitrary rotation by phi degrees (z phi z) Parameters n_pi_2 (int) \u2014 number of points for a stanard pi/2 pulse. n_pi (int) \u2014 number of points for a stanard pi pulse. n_p (list) \u2014 list of number of points for each plunger pulse length (default = []). arbZ (list) \u2014 list of tuples of (arbitrary Z command table index, rotation angle) (default = []). Returns (command_table (dict)) Dictionary of the RF command table to be directly uploaded onto AWG core. function silospin.quantum_compiler.quantum_compiler_helpers. make_plunger_command_table ( n_p , n_rf ) Generates command table for a single DC AWG core. Each core has two channels. - 0, plunger 1 pulse in plunger 1 frame 1, plunger 2 pulse in plunger 2 frame 2, plunger 1 pulse in plunger 2 frame 3, plunger 2 pulse in plunger 1 frame 4, plunger 1 pulse in pi/2 frame 5, plunger 2 pulse in pi/2 frame 6, plunger 1 pulse in pi frame 7, plunger 2 pulse in pi frame 8, wait for pi/2 pulse duration 9, wait for pi pulse duration 10, wait for plunger 1 pulse duration 11, wait for plunger 2 pulse duration 12, impose 0 degree phase shift Parameters n_p (list) \u2014 list of 2 tuples of the form (ch_idx, n_p) with ch_idx as plunger channel index and n_p as the number of points for the plunger pulse. n_rf (tuple) \u2014 tuple of the form (n_pi_2, n_pi), as the number of points for a pi/2 and pi pulse. Returns (command_table (dict)) Dictionary of the plunger command table to be directly uploaded onto AWG core. function silospin.quantum_compiler.quantum_compiler_helpers. make_waveform_placeholders ( n_array ) Generates sequencer code for waveform placeholders on HDAWG FPGAs. Parameters n_array (list) \u2014 list of the number of points used for each waveform. Note, that each element of n_array must be at least 48 and an integer multiple of 16. Returns (sequence_code (str)) sequencer code for waveform placeholders. function silospin.quantum_compiler.quantum_compiler_helpers. make_waveform_placeholders_plungers ( n_array ) Generates sequencer code for plunger gate waveform placeholders on HDAWG FPGAs. Parameters n_array (list) \u2014 list of the number of points used for each waveform. Note, that each element of n_array must be at least 48 and an integer multiple of 16. Returns (sequence_code (str)) sequencer code for waveform placeholders. function silospin.quantum_compiler.quantum_compiler_helpers. make_gateset_sequencer_hard_trigger ( n_seq , n_av , trig_channel=True ) Generates sequencer code for waveform placeholders on HDAWG FPGAs. Parameters n_av (int) \u2014 number of inner loops to iterate over during a GST run. trig_channel (bool) \u2014 True if this core receives a physical trigger input, False otherwise. n_array (list) \u2014 list of the command table indices being executed on the AWG core. Returns (program (str)) sequencer code for with command table executions for a given quantum algorithm. function silospin.quantum_compiler.quantum_compiler_helpers. make_gate_npoints ( gate_parameters , sample_rate ) Generates a dictionary with the number of poitns for each pulse type used in a quantum algorithm. Parameters sample_rate (float) \u2014 sample rate of the HDAWG in samples per second. n_array (list) \u2014 list of the command table indices being executed on the AWG core. Returns (program (str)) sequencer code for with command table executions for a given quantum algorithm. function silospin.quantum_compiler.quantum_compiler_helpers. generate_waveforms ( gate_npoints , channel_map , added_padding=0 ) Generates a dictionary with all waveforms to be uploaded on 4 AWG cores, provided the number of points for each gate, channel mapping, and additional uniform padding per gate. Waveforms generated in the form lists, accounting for all padding schemes. Additional padding adds delays uniformly to all gates in a sequenc. Padding on either side of gates not to exceed 5 ns. Outer elements keys of waveform dictionary correspond to AWG core index (from 1-4). Dedicated RF cores have keys corresponding to each waveform: - \"pi_pifr\", pi pulse in a pi frame - \"pi_2_pi_2fr\", pi/2 pulse in a pi/2 frame - \"pi_2_pifr\", pi/2 pulse in a pi frame Dedicated DC cores have keys corresponding to each waveform: \"p1_p1fr\", plunger 1 pulse in plunger 1 frame \"p2_p2fr\", plunger 2 pulse in plunger 2 frame \"p1_p2fr\", plunger 1 pulse in plunger 2 frame \"p2_p1fr\", plunger 2 pulse in plunger 1 frame \"p1_pi_2fr\", plunger 1 pulse in pi/2 frame \"p2_pi_2fr\", plunger 2 pulse in pi/2 frame \"p1_pifr\", plunger 1 pulse in pi frame \"p2_pifr\", plunger 2 pulse in pi frame Parameters gate_npoints (dict) \u2014 dictionary of number of points per gate channel_map (dict) \u2014 channel mapping dictionary. added_padding (float) \u2014 added padding to either side of a gate pulse, in ns. Returns (waveforms (dict)) dictionary of waveforms to be uploaded on each core. function silospin.quantum_compiler.quantum_compiler_helpers. config_hdawg ( awg , gate_parameters ) Configures HDAWG module to run a quantum algorithm. In particular, this function does the following: - enables oscillator control sets oscillator frequencies sets output amplitudes for each channel turns on output channels Parameters awg (silospin.drivers.zi_hdawg.HdawgDriver) \u2014 instance of HDAWG. gate_parameters (dict) \u2014 dictionary of gate paramters for each qubit. Returns None. function silospin.quantum_compiler.quantum_compiler_io. gst_file_parser ( file_path , qubit_lengths , channel_mapping ) Outputs the mapping between AWG cores/channels and gate labels. Outer keys of dictionary correspond to core number running from 1-4 (e.g. chanel_mapping = {1 : {}, ... , 4: {}). These keys have values in the form of dictonaries with the following keys and values. \"ch\", dictionary of the core's output channels, output gate labels, and gate indices in the GST convention (dict) \"rf\", 1 if core is for RF pulses and 0 if for DC pulses (int) The dictionaries corresponding to the key \"ch\" have the following keys and values, - \"index\", list of 2 channels corresponding the specified core (grouping given by- 1: [1,2], 2: [3,4], 3: [5,6], 4: [7,8]). \"label\", list of 2 labels corresponding to each channel (e.g. [\"i1\", \"q1\"] as IQ pair for RF or [\"p12\", \"p21\"] as 2 plunger channels for DC). \"gateindex\", list of 2 gate indices corresponding to GST indices. (e.g. gate (1)x(1) maps to gateindex [1,1] for core 1 or (7)p(7)(8)p(8) maps to indices [7,8] of core 4.) Note: currently configured for 1 HDAWG unit with 4 AWG cores. Parameters tau_pi (dict) \u2014 list of core indices dedicated to RF control (default set to [1,2,3]). tau_pi_2 (dict) \u2014 list of core indices dedicated to RF control (default set to [1,2,3]).","title":"Quantum Compiler API"},{"location":"qc_api/#quantum-compiler-module","text":"","title":"Quantum compiler module"},{"location":"qc_api/#quantum-compiler","text":"class silospin.quantum_compiler.quantum_compiler. GateSetTomographyQuantumCompiler ( gst_file_path , awg , gate_parameters , n_inner=1 , n_outer=1 , trigger_channel=0 , added_padding=0 , config_awg=True ) Class representing an instance of compiler gate set tomography experiment (uses entirely rectangular waves). Attributes _awg (HdawgDriver) \u2014 Instance of HdawgDriver object, native to silospin. _awg_cores (list) \u2014 List of indcices corresponding to the qubits (AWG cores) used in the program. _channel_idxs (dict) \u2014 Grouping of channel indices for each core. _channel_osc_idxs (dict) \u2014 Grouping of oscillator indices for each core. _command_tables (dict) \u2014 Command table uplaoded to HDAWG containing phase change instructions for each gate. _ct_idxs (dict) \u2014 Dictionary of command table entries executed in HDAWG FPGA sequencer. Outer dictonary keys correspond to GST line number. Inner keys correspond to qubit (AWG core) indices and values are lists of gate strings. _gate_sequences (dict) \u2014 Dictionary of quantum gate sequences for each AWG core read in from GST file. Outer dictonary keys correspond to GST line number. Inner keys correspond to qubit (AWG core) indices and values are lists of gate strings. _gst_path (str) \u2014 File path for gate set tomography program being read and compiled. _qubit_parameters (dict) \u2014 Dictionary of standard parameters for each qubit. Dicionary keys correspond to qubit (AWG core) indices and value is dictonary of qubit parameters ([\"i_amp_pi\", \"q_amp_pi\", \"i_amp_pi_2\", \"q_amp_pi_2\", \"tau_pi\", \"tau_pi_2\", \"delta_iq\", \"mod_freq\"]). _sample_rate (float) \u2014 Sampling rate used by AWG. Set to 2.4 GSa/s _sequencer_code (dict) \u2014 Dictionary of sequencer code uploaded to each HDAWG coer. _waveforms (dict) \u2014 Dictionary of rectangular 'pi' and 'pi/2' waveforms to be uploaded to each core of HDAWG. Dict keys correspond to qubit (AWG core) indices. Values are 2 element lists containing waveforms in the form of numpy arrays (['pi/2', 'pi']). Methods run_program ( awg_idxs ) (None.) \u2014 Runs uploaded quantum algorithm on the specified AWG cores. method run_program ( awg_idxs=None ) Runs uploaded quantum algorithm on the specified AWG cores. Waits for external hardware trigger event to execute program.","title":"Quantum compiler"},{"location":"qc_api/#quantum-compiler-helper-functions","text":"function silospin.quantum_compiler.quantum_compiler_helpers. channel_mapper ( rf_cores=[1, 2, 3] , plunger_channels={'p12': 7, 'p21': 8} ) Outputs the mapping between AWG cores/channels and gate labels. Outer keys of dictionary correspond to core number running from 1-4 (e.g. chanel_mapping = {1 : {}, ... , 4: {}). These keys have values in the form of dictonaries with the following keys and values. \"ch\", dictionary of the core's output channels, output gate labels, and gate indices in the GST convention (dict) \"rf\", 1 if core is for RF pulses and 0 if for DC pulses (int) The dictionaries corresponding to the key \"ch\" have the following keys and values, - \"index\", list of 2 channels corresponding the specified core (grouping given by- 1: [1,2], 2: [3,4], 3: [5,6], 4: [7,8]). \"label\", list of 2 labels corresponding to each channel (e.g. [\"i1\", \"q1\"] as IQ pair for RF or [\"p12\", \"p21\"] as 2 plunger channels for DC). \"gateindex\", list of 2 gate indices corresponding to GST indices. (e.g. gate (1)x(1) maps to gateindex [1,1] for core 1 or (7)p(7)(8)p(8) maps to indices [7,8] of core 4.) Note: currently configured for 1 HDAWG unit with 4 AWG cores. Parameters rf_cores (list) \u2014 list of core indices dedicated to RF control (default set to [1,2,3]). plunger_channels (dict) \u2014 dictionary of RF core (default set to {\"p12\": 7, \"p21\": 8})). Returns (channel_mapper (dict)) Dictionary representing channel mapping. function silospin.quantum_compiler.quantum_compiler_helpers. make_gate_parameters ( tau_pi , tau_pi_2 , i_amp , q_amp , mod_freq , plunger_length , plunger_amp ) Outputs a dictionary representing the gate parameters of the set of qubits. Note that this dictionary should be stored as a pickle file and updated at each calibration step. Parameters tau_pi (dict) \u2014 dictionary of pi-pulse durations for each qubit, in seconds. tau_pi_2 (dict) \u2014 dictionary of pi/2-pulse durations for each qubit, in seconds. i_amp (dict) \u2014 dictionary of I-amplitudes for each qubit, in volts. q_amp (dict) \u2014 dictionary of Q-amplitudes for each qubit, in volts. mod_freq (dict) \u2014 dictionary of modulation frequencies for each qubit, in Hz. plunger_amp (dict) \u2014 dictionary of plunger gate amplitudes, in volts. plunger_lengths (dict) \u2014 dictionary of plunger gate lengths, in seconds. Returns (gate_parameters (dict)) gate parameters representing the currnet state of the set of qubits. function silospin.quantum_compiler.quantum_compiler_helpers. make_command_table_indices ( gt_seqs , taus_std , taus_p , n_arbZ ) Generates a dictionary with lists of command table executions for each core, provided the output of 'gst_file_parser'. This is the core of the quantum compiler, as it interprets longs RF and DC gate strings, converting them to FPGA instructions for amplitude and phase modulation. Outer-most keys \"plunger\" and \"rf\", containing instructions to be addressed separatley on the dedicated RF and DC cores. Outputs a dictionary with outer keys \"rf\" and \"plunger\", corresponding to executions for dedicated RF and DC AWG cores. The values for the \"rf\" keys are dictionaries with outer keys corresponding to each core and \"plunger\" has values of dictionaries with keys corresponding to each DC channel. Each of these core and channel keys have values of lists of command table (CT) indices (integers) to be addressed on the AWG cores. Each command table index maps to an entry of a CT, determining the waveform, amplitude, and phase to be played when the CT entry is executed. Phase changes for each gate are computed on-the-fly. Note that this function supports the following gates: 'x', 'xxx', 'xx', 'mxxm', 'y', 'yyy', 'y y', 'myym', 'arbZ', 'p', 't'. See 'Quantum Compiler' tab for a more elaborate description. Note: this function is currently configured for 1 HDAWG unit with 4 AWG cores. Parameters gt_seqs (dict) \u2014 dictionary output of 'gst_file_parser', representing sequence of RF and DC gate strings on each core. taus_std (list) \u2014 list of standard pi/2 and pi pulse lengths in ns ([tau_pi2, tau_pi]). taus_p (list) \u2014 list of tuples, each with elements (ch_idx, tau_p) representing the channel index and corresponding plunger pulse length. n_arbZ (int) \u2014 the accumulated number of previously seen arbitrary-Z rotations over all lines in GST file being read. Returns (ct_idxs (dict), arbZ (list)) dictonary of command table indices to execute, list of tuples of (arbitrary Z comman table index, rotation angle). function silospin.quantum_compiler.quantum_compiler_helpers. make_rf_command_table ( n_pi_2 , n_pi , n_p=[] , arbZ=[] ) Generates command tables for dedicated RF cores. Each command table index corresponds to a phase increment and waveform play. Command table entries correspond to the following indices: 0, initial xx gate in pi frame 1, initial yy gate in pi frame 2, initial mxxm gate in pi frame 3, initial myym gate in pi frame 4, initial x gate in pi frame 5, initial y gate in pi frame 6, initial xxx gate in pi frame 7, initial yyy gate in pi frame 8, initial x gate in pi/2 frame 9, initial y gate in pi/2 frame 10, initial xxx gate in pi/2 frame 11, initial yyy gate in pi/2 frame 12, increment by 0 degrees in for pi gate in a pi frame 13, increment by -90 degrees in for pi gate in a pi frame 14, increment by -180 degrees in for pi gate in a pi frame 15, increment by -270 degrees in for pi gate in a pi frame 16, increment by 90 degrees in for pi gate in a pi frame 17, increment by 180 degrees in for pi gate in a pi frame 18, increment by 270 degrees in for pi gate in a pi frame 19, increment by 0 degrees in for pi/2 gate in a pi frame 20, increment by -90 degrees in for pi/2 gate in a pi frame 21, increment by -180 degrees in for pi/2 gate in a pi frame 22, increment by -270 degrees in for pi/2 gate in a pi frame 23, increment by 90 degrees in for pi/2 gate in a pi frame 24, increment by 180 degrees in for pi/2 gate in a pi frame 25, increment by 270 degrees in for pi/2 gate in a pi frame 26, increment by 0 degrees in for pi/2 gate in a pi/2 frame 27, increment by -90 degrees in for pi/2 gate in a pi/2 frame 28, increment by -180 degrees in for pi/2 gate in a pi/2 frame 29, increment by -270 degrees in for pi/2 gate in a pi/2 frame 30, increment by 90 degrees in for pi/2 gate in a pi/2 frame 31, increment by 180 degrees in for pi/2 gate in a pi/2 frame 32, increment by 270 degrees in for pi/2 gate in a pi/2 frame 33, wait for pi/2 duration 34, wait for pi duration 35 - 35+n_p, wait for DC pulse durations 36+n_p, increment phase by 0 degrees (z0z gate) 36+n_p-36+n_p+n_z, perform arbitrary rotation by phi degrees (z phi z) Parameters n_pi_2 (int) \u2014 number of points for a stanard pi/2 pulse. n_pi (int) \u2014 number of points for a stanard pi pulse. n_p (list) \u2014 list of number of points for each plunger pulse length (default = []). arbZ (list) \u2014 list of tuples of (arbitrary Z command table index, rotation angle) (default = []). Returns (command_table (dict)) Dictionary of the RF command table to be directly uploaded onto AWG core. function silospin.quantum_compiler.quantum_compiler_helpers. make_plunger_command_table ( n_p , n_rf ) Generates command table for a single DC AWG core. Each core has two channels. - 0, plunger 1 pulse in plunger 1 frame 1, plunger 2 pulse in plunger 2 frame 2, plunger 1 pulse in plunger 2 frame 3, plunger 2 pulse in plunger 1 frame 4, plunger 1 pulse in pi/2 frame 5, plunger 2 pulse in pi/2 frame 6, plunger 1 pulse in pi frame 7, plunger 2 pulse in pi frame 8, wait for pi/2 pulse duration 9, wait for pi pulse duration 10, wait for plunger 1 pulse duration 11, wait for plunger 2 pulse duration 12, impose 0 degree phase shift Parameters n_p (list) \u2014 list of 2 tuples of the form (ch_idx, n_p) with ch_idx as plunger channel index and n_p as the number of points for the plunger pulse. n_rf (tuple) \u2014 tuple of the form (n_pi_2, n_pi), as the number of points for a pi/2 and pi pulse. Returns (command_table (dict)) Dictionary of the plunger command table to be directly uploaded onto AWG core. function silospin.quantum_compiler.quantum_compiler_helpers. make_waveform_placeholders ( n_array ) Generates sequencer code for waveform placeholders on HDAWG FPGAs. Parameters n_array (list) \u2014 list of the number of points used for each waveform. Note, that each element of n_array must be at least 48 and an integer multiple of 16. Returns (sequence_code (str)) sequencer code for waveform placeholders. function silospin.quantum_compiler.quantum_compiler_helpers. make_waveform_placeholders_plungers ( n_array ) Generates sequencer code for plunger gate waveform placeholders on HDAWG FPGAs. Parameters n_array (list) \u2014 list of the number of points used for each waveform. Note, that each element of n_array must be at least 48 and an integer multiple of 16. Returns (sequence_code (str)) sequencer code for waveform placeholders. function silospin.quantum_compiler.quantum_compiler_helpers. make_gateset_sequencer_hard_trigger ( n_seq , n_av , trig_channel=True ) Generates sequencer code for waveform placeholders on HDAWG FPGAs. Parameters n_av (int) \u2014 number of inner loops to iterate over during a GST run. trig_channel (bool) \u2014 True if this core receives a physical trigger input, False otherwise. n_array (list) \u2014 list of the command table indices being executed on the AWG core. Returns (program (str)) sequencer code for with command table executions for a given quantum algorithm. function silospin.quantum_compiler.quantum_compiler_helpers. make_gate_npoints ( gate_parameters , sample_rate ) Generates a dictionary with the number of poitns for each pulse type used in a quantum algorithm. Parameters sample_rate (float) \u2014 sample rate of the HDAWG in samples per second. n_array (list) \u2014 list of the command table indices being executed on the AWG core. Returns (program (str)) sequencer code for with command table executions for a given quantum algorithm. function silospin.quantum_compiler.quantum_compiler_helpers. generate_waveforms ( gate_npoints , channel_map , added_padding=0 ) Generates a dictionary with all waveforms to be uploaded on 4 AWG cores, provided the number of points for each gate, channel mapping, and additional uniform padding per gate. Waveforms generated in the form lists, accounting for all padding schemes. Additional padding adds delays uniformly to all gates in a sequenc. Padding on either side of gates not to exceed 5 ns. Outer elements keys of waveform dictionary correspond to AWG core index (from 1-4). Dedicated RF cores have keys corresponding to each waveform: - \"pi_pifr\", pi pulse in a pi frame - \"pi_2_pi_2fr\", pi/2 pulse in a pi/2 frame - \"pi_2_pifr\", pi/2 pulse in a pi frame Dedicated DC cores have keys corresponding to each waveform: \"p1_p1fr\", plunger 1 pulse in plunger 1 frame \"p2_p2fr\", plunger 2 pulse in plunger 2 frame \"p1_p2fr\", plunger 1 pulse in plunger 2 frame \"p2_p1fr\", plunger 2 pulse in plunger 1 frame \"p1_pi_2fr\", plunger 1 pulse in pi/2 frame \"p2_pi_2fr\", plunger 2 pulse in pi/2 frame \"p1_pifr\", plunger 1 pulse in pi frame \"p2_pifr\", plunger 2 pulse in pi frame Parameters gate_npoints (dict) \u2014 dictionary of number of points per gate channel_map (dict) \u2014 channel mapping dictionary. added_padding (float) \u2014 added padding to either side of a gate pulse, in ns. Returns (waveforms (dict)) dictionary of waveforms to be uploaded on each core. function silospin.quantum_compiler.quantum_compiler_helpers. config_hdawg ( awg , gate_parameters ) Configures HDAWG module to run a quantum algorithm. In particular, this function does the following: - enables oscillator control sets oscillator frequencies sets output amplitudes for each channel turns on output channels Parameters awg (silospin.drivers.zi_hdawg.HdawgDriver) \u2014 instance of HDAWG. gate_parameters (dict) \u2014 dictionary of gate paramters for each qubit. Returns None. function silospin.quantum_compiler.quantum_compiler_io. gst_file_parser ( file_path , qubit_lengths , channel_mapping ) Outputs the mapping between AWG cores/channels and gate labels. Outer keys of dictionary correspond to core number running from 1-4 (e.g. chanel_mapping = {1 : {}, ... , 4: {}). These keys have values in the form of dictonaries with the following keys and values. \"ch\", dictionary of the core's output channels, output gate labels, and gate indices in the GST convention (dict) \"rf\", 1 if core is for RF pulses and 0 if for DC pulses (int) The dictionaries corresponding to the key \"ch\" have the following keys and values, - \"index\", list of 2 channels corresponding the specified core (grouping given by- 1: [1,2], 2: [3,4], 3: [5,6], 4: [7,8]). \"label\", list of 2 labels corresponding to each channel (e.g. [\"i1\", \"q1\"] as IQ pair for RF or [\"p12\", \"p21\"] as 2 plunger channels for DC). \"gateindex\", list of 2 gate indices corresponding to GST indices. (e.g. gate (1)x(1) maps to gateindex [1,1] for core 1 or (7)p(7)(8)p(8) maps to indices [7,8] of core 4.) Note: currently configured for 1 HDAWG unit with 4 AWG cores. Parameters tau_pi (dict) \u2014 list of core indices dedicated to RF control (default set to [1,2,3]). tau_pi_2 (dict) \u2014 list of core indices dedicated to RF control (default set to [1,2,3]).","title":"Quantum compiler helper functions"}]}